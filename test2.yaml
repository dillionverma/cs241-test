test0:
  in: |-
    wain(int a, int b) {
      return a / b;
    }
  out: |
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    RETURN return
    ID a
    SLASH /
    ID b
    SEMI ;
    RBRACE }
test1:
  in: |
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x ! = 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test2:
  in: |-
    wain(int a, int b) {
       int xxx ;
       int yyy;
       if (x == y) { a = b; } else { c = d; }
       while (a+b <= c*d) {}
       a = b+1*(c%d-e/x);
       c = 132;
       return a + b;   // unhelpful comment about summing a and b
    }

    int wain(int * a, int N){
       int i = 0;
       int j = 0;
       int k = 0;
       int sum = 0;
       int n = 0;
       int max = 0;
       n = *(a);
       //for (i=0;i<n;i++) {
       while (i < n) { 
          //for (j=0;j<n;j++) {
          j = 0;
          while (j < n) {
             sum = 0;
             //for (k=0;k<n;k++) {
             k = 0;
             while (k < n) {
                //sum = sum + A[i,k] + B[k,j];
                sum = sum + *(a+1+n*i+k) * *(a+1+n*n+n*k+j);
                k = k + 1;
  out: |
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID xxx
    SEMI ;
    INT int
    ID yyy
    SEMI ;
    IF if
    LPAREN (
    ID x
    EQ ==
    ID y
    RPAREN )
    LBRACE {
    ID a
    BECOMES =
    ID b
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    ID c
    BECOMES =
    ID d
    SEMI ;
    RBRACE }
    WHILE while
    LPAREN (
    ID a
    PLUS +
    ID b
    LE <=
    ID c
    STAR *
    ID d
    RPAREN )
    LBRACE {
    RBRACE }
    ID a
    BECOMES =
    ID b
    PLUS +
    NUM 1
    STAR *
    LPAREN (
    ID c
    PCT %
    ID d
    MINUS -
    ID e
    SLASH /
    ID x
    RPAREN )
    SEMI ;
    ID c
    BECOMES =
    NUM 132
    SEMI ;
    RETURN return
    ID a
    PLUS +
    ID b
    SEMI ;
    RBRACE }
    INT int
    WAIN wain
    LPAREN (
    INT int
    STAR *
    ID a
    COMMA ,
    INT int
    ID N
    RPAREN )
    LBRACE {
    INT int
    ID i
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID j
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID k
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID sum
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID n
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID max
    BECOMES =
    NUM 0
    SEMI ;
    ID n
    BECOMES =
    STAR *
    LPAREN (
    ID a
    RPAREN )
    SEMI ;
    WHILE while
    LPAREN (
    ID i
    LT <
    ID n
    RPAREN )
    LBRACE {
    ID j
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID j
    LT <
    ID n
    RPAREN )
    LBRACE {
    ID sum
    BECOMES =
    NUM 0
    SEMI ;
    ID k
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID k
    LT <
    ID n
    RPAREN )
    LBRACE {
    ID sum
    BECOMES =
    ID sum
    PLUS +
    STAR *
    LPAREN (
    ID a
    PLUS +
    NUM 1
    PLUS +
    ID n
    STAR *
    ID i
    PLUS +
    ID k
    RPAREN )
    STAR *
    STAR *
    LPAREN (
    ID a
    PLUS +
    NUM 1
    PLUS +
    ID n
    STAR *
    ID n
    PLUS +
    ID n
    STAR *
    ID k
    PLUS +
    ID j
    RPAREN )
    SEMI ;
    ID k
    BECOMES =
    ID k
    PLUS +
    NUM 1
    SEMI ;
test3:
  in: |-

    wain(int a, int b) {
       while (a > b) {a = a - 1;}
       return a;   // unhelpful comment about summing a and b
    }

    int wain(int* array, int size) {
        int* copy = NULL;
        int i = 0;
        int j = 0;
        int t = 0;
        int k = 0;
        int sum = 0;

        // make a copy
        copy = new int[size];
        i = 0;
        while(i < size) {
            sum = sum + *(array+i);
            *(copy+i) = *(array+i);
            i = i + 1;
        }

        // bubble sort
        k = 0;
        while(k < size) {
            i = 0;
            while(i < size-1) {
                j = i + 1;
                if( *(array+i) > *(array+j) ) {
                    t = *(array+i);
  out: |
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    WHILE while
    LPAREN (
    ID a
    GT >
    ID b
    RPAREN )
    LBRACE {
    ID a
    BECOMES =
    ID a
    MINUS -
    NUM 1
    SEMI ;
    RBRACE }
    RETURN return
    ID a
    SEMI ;
    RBRACE }
    INT int
    WAIN wain
    LPAREN (
    INT int
    STAR *
    ID array
    COMMA ,
    INT int
    ID size
    RPAREN )
    LBRACE {
    INT int
    STAR *
    ID copy
    BECOMES =
    NULL NULL
    SEMI ;
    INT int
    ID i
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID j
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID t
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID k
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID sum
    BECOMES =
    NUM 0
    SEMI ;
    ID copy
    BECOMES =
    NEW new
    INT int
    LBRACK [
    ID size
    RBRACK ]
    SEMI ;
    ID i
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID i
    LT <
    ID size
    RPAREN )
    LBRACE {
    ID sum
    BECOMES =
    ID sum
    PLUS +
    STAR *
    LPAREN (
    ID array
    PLUS +
    ID i
    RPAREN )
    SEMI ;
    STAR *
    LPAREN (
    ID copy
    PLUS +
    ID i
    RPAREN )
    BECOMES =
    STAR *
    LPAREN (
    ID array
    PLUS +
    ID i
    RPAREN )
    SEMI ;
    ID i
    BECOMES =
    ID i
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ID k
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID k
    LT <
    ID size
    RPAREN )
    LBRACE {
    ID i
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID i
    LT <
    ID size
    MINUS -
    NUM 1
    RPAREN )
    LBRACE {
    ID j
    BECOMES =
    ID i
    PLUS +
    NUM 1
    SEMI ;
    IF if
    LPAREN (
    STAR *
    LPAREN (
    ID array
    PLUS +
    ID i
    RPAREN )
    GT >
    STAR *
    LPAREN (
    ID array
    PLUS +
    ID j
    RPAREN )
    RPAREN )
    LBRACE {
    ID t
    BECOMES =
    STAR *
    LPAREN (
    ID array
    PLUS +
    ID i
    RPAREN )
    SEMI ;
test4:
  in: |-
    int wain(int a, int b){
       int foo = 16;
       int bar = 1073741825;
       println(foo);
       println(bar);
       return foo+bar;
    }
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID foo
    BECOMES =
    NUM 16
    SEMI ;
    INT int
    ID bar
    BECOMES =
    NUM 1073741825
    SEMI ;
    PRINTLN println
    LPAREN (
    ID foo
    RPAREN )
    SEMI ;
    PRINTLN println
    LPAREN (
    ID bar
    RPAREN )
    SEMI ;
    RETURN return
    ID foo
    PLUS +
    ID bar
    SEMI ;
    RBRACE }
test5:
  in: |-
    int wain(int a,int b){
       int bb = 0;
       int c = 0;
       int i;
       int if;
       int iff;
       int whil;
       int whilex;
       int ifwhile;
       int ifreturn;
       int if123;
       bb = b;
       c = 16;
       while (a > 0) {
         println(a);
         b = bb;
         while (b > 0) {
            //+ b
            b = b - 1;
            c = c + 1;
         }
         //+a
         a = a - 1;
         //+a
       }
       return c ;
    }
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID bb
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID c
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID i
    SEMI ;
    INT int
    IF if
    SEMI ;
    INT int
    ID iff
    SEMI ;
    INT int
    ID whil
    SEMI ;
    INT int
    ID whilex
    SEMI ;
    INT int
    ID ifwhile
    SEMI ;
    INT int
    ID ifreturn
    SEMI ;
    INT int
    ID if123
    SEMI ;
    ID bb
    BECOMES =
    ID b
    SEMI ;
    ID c
    BECOMES =
    NUM 16
    SEMI ;
    WHILE while
    LPAREN (
    ID a
    GT >
    NUM 0
    RPAREN )
    LBRACE {
    PRINTLN println
    LPAREN (
    ID a
    RPAREN )
    SEMI ;
    ID b
    BECOMES =
    ID bb
    SEMI ;
    WHILE while
    LPAREN (
    ID b
    GT >
    NUM 0
    RPAREN )
    LBRACE {
    ID b
    BECOMES =
    ID b
    MINUS -
    NUM 1
    SEMI ;
    ID c
    BECOMES =
    ID c
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ID a
    BECOMES =
    ID a
    MINUS -
    NUM 1
    SEMI ;
    RBRACE }
    RETURN return
    ID c
    SEMI ;
    RBRACE }
test6:
  in: |-
    int wain(int a,int b){
       int bb = 0;
       int c = 0;
       bb = b;
       c = 16;
       while (a > 0) {
         println(a);
         b = bb;
         while (b > 0) {
            //+ b
            b = b - 1;
            c = c + 1;
         }
         //+a
         a = a - 1;
         //+a
       }
       return c ;
    }
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID bb
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID c
    BECOMES =
    NUM 0
    SEMI ;
    ID bb
    BECOMES =
    ID b
    SEMI ;
    ID c
    BECOMES =
    NUM 16
    SEMI ;
    WHILE while
    LPAREN (
    ID a
    GT >
    NUM 0
    RPAREN )
    LBRACE {
    PRINTLN println
    LPAREN (
    ID a
    RPAREN )
    SEMI ;
    ID b
    BECOMES =
    ID bb
    SEMI ;
    WHILE while
    LPAREN (
    ID b
    GT >
    NUM 0
    RPAREN )
    LBRACE {
    ID b
    BECOMES =
    ID b
    MINUS -
    NUM 1
    SEMI ;
    ID c
    BECOMES =
    ID c
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ID a
    BECOMES =
    ID a
    MINUS -
    NUM 1
    SEMI ;
    RBRACE }
    RETURN return
    ID c
    SEMI ;
    RBRACE }
test7:
  in: |-
    wain(int a, int b) {
       int counter; 
       int product;
       product = 0-1;
       if (a >= 0) {
          if (b >= 0) {
             if (a < 10) {
                if (b < 10) {
                   product = 1;
                   counter = 0;
                   while (counter < b) {
                      product = product * a;
                      counter = counter + 1;
                   }  
                } else {}
             } else {}
          } else {}
       } else {}
       return product;
    }
  out: |
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID counter
    SEMI ;
    INT int
    ID product
    SEMI ;
    ID product
    BECOMES =
    NUM 0
    MINUS -
    NUM 1
    SEMI ;
    IF if
    LPAREN (
    ID a
    GE >=
    NUM 0
    RPAREN )
    LBRACE {
    IF if
    LPAREN (
    ID b
    GE >=
    NUM 0
    RPAREN )
    LBRACE {
    IF if
    LPAREN (
    ID a
    LT <
    NUM 10
    RPAREN )
    LBRACE {
    IF if
    LPAREN (
    ID b
    LT <
    NUM 10
    RPAREN )
    LBRACE {
    ID product
    BECOMES =
    NUM 1
    SEMI ;
    ID counter
    BECOMES =
    NUM 0
    SEMI ;
    WHILE while
    LPAREN (
    ID counter
    LT <
    ID b
    RPAREN )
    LBRACE {
    ID product
    BECOMES =
    ID product
    STAR *
    ID a
    SEMI ;
    ID counter
    BECOMES =
    ID counter
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    RETURN return
    ID product
    SEMI ;
    RBRACE }
test8:
  in: |-
    wain(int a, int b){
       b = b+a+b+c+d+d+e-f-g-h-j-k-l-m/n/o/p/q/r/t/y/o/uy/c%f+ a;
       return a;
    }
  out: |
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    ID b
    BECOMES =
    ID b
    PLUS +
    ID a
    PLUS +
    ID b
    PLUS +
    ID c
    PLUS +
    ID d
    PLUS +
    ID d
    PLUS +
    ID e
    MINUS -
    ID f
    MINUS -
    ID g
    MINUS -
    ID h
    MINUS -
    ID j
    MINUS -
    ID k
    MINUS -
    ID l
    MINUS -
    ID m
    SLASH /
    ID n
    SLASH /
    ID o
    SLASH /
    ID p
    SLASH /
    ID q
    SLASH /
    ID r
    SLASH /
    ID t
    SLASH /
    ID y
    SLASH /
    ID o
    SLASH /
    ID uy
    SLASH /
    ID c
    PCT %
    ID f
    PLUS +
    ID a
    SEMI ;
    RETURN return
    ID a
    SEMI ;
    RBRACE }
test9:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID x
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID y
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID c
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID divisor
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID done
    BECOMES =
    NUM 0
    SEMI ;
    IF if
    LPAREN (
    ID a
    LT <
    ID b
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID a
    SEMI ;
    ID y
    BECOMES =
    ID b
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    ID x
    BECOMES =
    ID b
    SEMI ;
    ID y
    BECOMES =
    ID c
    SEMI ;
    RBRACE }
    IF if
    LPAREN (
    ID x
    EQ ==
    NUM 1
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    IF if
    LPAREN (
    ID x
    EQ ==
    NUM 2
    RPAREN )
    LBRACE {
    IF if
    LPAREN (
    ID y
    GE >=
    NUM 2
    RPAREN )
    LBRACE {
    ID c
    BECOMES =
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    IF if
    LPAREN (
    ID x
    PCT %
    NUM 2
    EQ ==
    NUM 0
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
test10:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = 0b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test11:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 01234bbbb4567;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test12:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
    a=b+c+d+e+f+g+h+aa+bb+0+1+2///;
    ;
       if (abcdefbghijkmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789x == 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
  error: true
test13:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x !! 2) {
          if (y == 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test14:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x !a 2) {
          if (y >= 2) { / / 
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test15:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 0123) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  error: true
test16:
  in: |-
    //// Gordon V. Cormack
    //silly
    //
    //
    //

    int wain(int a,int b){
       int x = 0;   // x will hold the lower value
       int y = 0;   // y will hold the higher value
       int c = 0;   // c will be the accumulator
       int divisor = 0;
       int done = 0;
       if (a < b) {   // test if a less than b
          x = a;      // assign x the lesser
          y = b;      // assign y the greater
       } else {       // I guess a isn't less than b
          x = b;      // assign x the lesser
          y = c;      // assign y the greater
       }
       if (x == 1) {
          x = x + 1;
       }else{}
       if (x == 2) {
          if (y >= 2) {
             c = 1;
          }else{}
          x = x + 1;
       }else{}
       if (x%2 == 0) {
          x = x + 1;
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID x
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID y
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID c
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID divisor
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID done
    BECOMES =
    NUM 0
    SEMI ;
    IF if
    LPAREN (
    ID a
    LT <
    ID b
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID a
    SEMI ;
    ID y
    BECOMES =
    ID b
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    ID x
    BECOMES =
    ID b
    SEMI ;
    ID y
    BECOMES =
    ID c
    SEMI ;
    RBRACE }
    IF if
    LPAREN (
    ID x
    EQ ==
    NUM 1
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    IF if
    LPAREN (
    ID x
    EQ ==
    NUM 2
    RPAREN )
    LBRACE {
    IF if
    LPAREN (
    ID y
    GE >=
    NUM 2
    RPAREN )
    LBRACE {
    ID c
    BECOMES =
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
    RBRACE }
    ELSE else
    LBRACE {
    RBRACE }
    IF if
    LPAREN (
    ID x
    PCT %
    NUM 2
    EQ ==
    NUM 0
    RPAREN )
    LBRACE {
    ID x
    BECOMES =
    ID x
    PLUS +
    NUM 1
    SEMI ;
test17:
  in: |-
    int z(int z, int z, int z) {
      return if while else;
    }
  out: | 
    INT int
    ID z
    LPAREN (
    INT int
    ID z
    COMMA ,
    INT int
    ID z
    COMMA ,
    INT int
    ID z
    RPAREN )
    LBRACE {
    RETURN return
    IF if
    WHILE while
    ELSE else
    SEMI ;
    RBRACE }
test18:
  in: |-
    int wain(int a,int b) {
      int aaa = 0;
      int aab = 0;
      int aac = 0;
      int aad = 0;
      int aae = 0;
      int aaf = 0;
      int aag = 0;
      int aah = 0;
      int aai = 0;
      int aaj = 0;
      int aak = 0;
      int aal = 0;
      int aam = 0;
      int aan = 0;
      int aao = 0;
      int aap = 0;
      int aaq = 0;
      int aar = 0;
      int aas = 0;
      int aat = 0;
      int aau = 0;
      int aav = 0;
      int aaw = 0;
      int aax = 0;
      int aay = 0;
      int aaz = 0;
      int aba = 0;
      int abb = 0;
      int abc = 0;
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    ID a
    COMMA ,
    INT int
    ID b
    RPAREN )
    LBRACE {
    INT int
    ID aaa
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aab
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aac
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aad
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aae
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aaf
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aag
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aah
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aai
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aaj
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aak
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aal
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aam
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aan
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aao
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aap
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aaq
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aar
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aas
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aat
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aau
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aav
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aaw
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aax
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aay
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aaz
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID aba
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID abb
    BECOMES =
    NUM 0
    SEMI ;
    INT int
    ID abc
    BECOMES =
    NUM 0
    SEMI ;
test19: 
  in: |-
    int wain(int *x, int ***y) {
      int x = wain(&x, &&&x);
      wain = x(y, z);
      return wain(z, 12345, 1234567890, 98765432123456789);
    }
  error: true
test20: 
  in: |-
    int wain(int &x) {
      int x = 2147483647;
      int y = 2147483646;
      int z = 2147483645;
      int zz = wain(x, y, &*z);
      y < = 5;
      int xx > = y;
      return wain;
    }
  out: |
    INT int
    WAIN wain
    LPAREN (
    INT int
    AMP &
    ID x
    RPAREN )
    LBRACE {
    INT int
    ID x
    BECOMES =
    NUM 2147483647
    SEMI ;
    INT int
    ID y
    BECOMES =
    NUM 2147483646
    SEMI ;
    INT int
    ID z
    BECOMES =
    NUM 2147483645
    SEMI ;
    INT int
    ID zz
    BECOMES =
    WAIN wain
    LPAREN (
    ID x
    COMMA ,
    ID y
    COMMA ,
    AMP &
    STAR *
    ID z
    RPAREN )
    SEMI ;
    ID y
    LT <
    BECOMES =
    NUM 5
    SEMI ;
    INT int
    ID xx
    GT >
    BECOMES =
    ID y
    SEMI ;
    RETURN return
    WAIN wain
    SEMI ;
    RBRACE }
test21: 
  in: |-
    int wain(int int int int int) {
      int wain = 2147483648;
      return wain = 4;
    }
  error: true
test22: 
  in: |-
    int wain(for (int i = 0; i < 11; i++) var) {
      int wain = 2147483649;
      return *new int[while(1 < 0) { return x+y+z; }];
    }
  error: true
